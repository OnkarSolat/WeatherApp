'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _If = require('./If');

var _If2 = _interopRequireDefault(_If);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var func = _react.PropTypes.func,
    string = _react.PropTypes.string;

var _Cancel = (0, _symbol2.default)('cancel');

function getPromiseCancelable(onStart, onSuccess, onError) {
    var result = (0, _utils.PromiseCancelable)(function (resolve, reject) {
        return onStart(resolve, reject);
    });
    result.promise.then(onSuccess).catch(onError);
    return result;
}

var Await = function (_Component) {
    (0, _inherits3.default)(Await, _Component);

    function Await() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, Await);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Await.__proto__ || (0, _getPrototypeOf2.default)(Await)).call.apply(_ref, [this].concat(args))), _this), _this.onStart = function (resolve, reject) {
            _this.setState({ done: false });
            var onStart = _this.props.onStart;

            if (onStart) {
                onStart(resolve, reject);
            }
        }, _this.onSuccess = function (value) {
            _this.setState({ value: value, done: true });
            var onSuccess = _this.props.onSuccess;

            if (onSuccess) {
                onSuccess(value);
            }
        }, _this.onError = function (error) {
            if (!error || !error.isCanceled) {
                _this.setState({ error: error, done: true });
                var onError = _this.props.onError;

                if (onError) {
                    onError(error);
                }
            } else {
                var onCancel = _this.props.onCancel;

                if (onCancel) {
                    onCancel(error);
                }
            }
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(Await, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _getPromiseCancelable = getPromiseCancelable(this.onStart, this.onSuccess, this.onError),
                cancel = _getPromiseCancelable.cancel;

            this[_Cancel] = cancel;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this[_Cancel]();
        }
    }, {
        key: 'render',
        value: function render() {
            var _state = this.state,
                done = _state.done,
                value = _state.value,
                error = _state.error;
            var _props = this.props,
                renderComplete = _props.renderComplete,
                renderPending = _props.renderPending,
                comment = _props.comment;

            return _react2.default.createElement(_If2.default, { is: done,
                props: { error: error, value: value },
                render: renderComplete,
                elseRender: renderPending,
                comment: comment
            });
        }
    }]);
    return Await;
}(_react.Component);

Await.propTypes = {
    renderComplete: func.isRequired,
    renderPending: func.isRequired,

    onStart: func.isRequired,
    onSuccess: func,
    onError: func,
    onCancel: func,

    comment: string
};
exports.default = Await;