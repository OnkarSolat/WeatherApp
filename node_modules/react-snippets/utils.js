'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PromiseCancelable = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.isComponent = isComponent;
exports.buildQuery = buildQuery;
exports.request = request;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultXHROptions = {
    query: {},
    method: 'GET',
    data: null,
    headers: {},
    charset: 'utf-8',
    responseType: '',
    onStart: function onStart() {},
    onProgress: function onProgress() {},
    onSuccess: function onSuccess() {},
    onError: function onError() {},
    onCancel: function onCancel() {}
};

var componentNameExpr = /^[A-Z]/;

function isComponent(value) {
    return typeof value === 'function' && componentNameExpr.test(value.name);
}

function buildQuery() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return (0, _keys2.default)(data).map(function (key) {
        var name = encodeURIComponent(key);
        var values = data[key];
        if (Array.isArray(values)) {
            return values.map(function (value) {
                return name + '=' + encodeURIComponent(value);
            }).join('&');
        }
        return name + '=' + encodeURIComponent(values);
    }).join('&');
}

function getUrl(_ref) {
    var url = _ref.url,
        query = _ref.query;

    var rawQuery = buildQuery(query || {});
    if (rawQuery) {
        return url + '?' + rawQuery;
    }
    return url;
}

function request(options) {
    options = (0, _extends3.default)({}, defaultXHROptions, options);
    options.method = options.method.toUpperCase();

    var xhr = new XMLHttpRequest();
    xhr.addEventListener('progress', function () {
        return options.onProgress(xhr);
    });
    xhr.addEventListener('load', function () {
        var isSuccess = (xhr.status / 100 | 0) === 2;
        if (isSuccess) {
            options.onSuccess(xhr);
        } else {
            options.onError(xhr);
        }
    });
    xhr.addEventListener('error', function () {
        return options.onError(xhr);
    });
    xhr.addEventListener('abort', function () {
        return options.onCancel(xhr);
    });

    var url = getUrl(options);
    xhr.open(options.method, url, true);

    if (options.withCredentials) {
        xhr.withCredentials = true;
    }
    var _options = options,
        username = _options.username,
        password = _options.password;

    if (username && password) {
        var basicAuth = 'Basic ' + btoa(username + ':' + password);
        xhr.setRequestHeader('Authorization', basicAuth);
    }

    (0, _keys2.default)(options.headers).forEach(function (name) {
        var values = options.headers[name];
        if (!Array.isArray(values)) {
            values = [values];
        }
        values.forEach(function (value) {
            return xhr.setRequestHeader(name, value);
        });
    });
    xhr.responseType = options.responseType;
    options.onStart(xhr);
    xhr.send(options.data);

    return xhr;
}

var PromiseCancelable = exports.PromiseCancelable = function PromiseCancelable(promiseFunction) {
    var context = {};
    var promise = new _promise2.default(function (resolve, reject) {
        promiseFunction(resolve, reject);
        context.resolve = resolve;
        context.reject = reject;
    });
    return {
        promise: promise,
        cancel: function cancel(customError) {
            var error = customError || new Error('Promise is canceled');
            error.isCanceled = true;
            context.reject(error);
            return promise;
        }
    };
};