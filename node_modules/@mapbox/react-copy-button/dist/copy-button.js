'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _xtend = require('xtend');

var _xtend2 = _interopRequireDefault(_xtend);

var _clipboardMin = require('clipboard/dist/clipboard.min.js');

var _clipboardMin2 = _interopRequireDefault(_clipboardMin);

var _reactIconButton = require('@mapbox/react-icon-button');

var _reactIconButton2 = _interopRequireDefault(_reactIconButton);

var _reactIcon = require('@mapbox/react-icon');

var _reactIcon2 = _interopRequireDefault(_reactIcon);

var _reactPopover = require('@mapbox/react-popover');

var _reactPopover2 = _interopRequireDefault(_reactPopover);

var _frontendUtilOmit = require('@mapbox/frontend-util-omit');

var _frontendUtilOmit2 = _interopRequireDefault(_frontendUtilOmit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CopyButton = function (_React$PureComponent) {
  _inherits(CopyButton, _React$PureComponent);

  function CopyButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CopyButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CopyButton.__proto__ || Object.getPrototypeOf(CopyButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      showingFeedback: false
    }, _this.handleCopyButtonClick = function () {
      // Clipboard.js attaches its own click handlers for copying
      var _this$props = _this.props,
          onCopy = _this$props.onCopy,
          text = _this$props.text;

      if (onCopy) {
        onCopy(text);
      }
      _this.showFeedback();
    }, _this.showFeedback = function () {
      _this.setState({ showingFeedback: true });
      _this.revertTimer = setTimeout(function () {
        _this.setState({ showingFeedback: false });
      }, _this.props.feedbackTime);
    }, _this.setContainer = function (element) {
      if (!element) return;
      var textEl = _this.props.textEl;

      _this.container = element;
      if (!textEl && _clipboardMin2.default.isSupported()) {
        _this.setClipboard(element);
      }
    }, _this.getContainer = function () {
      return _this.container;
    }, _this.setClipboard = function (element) {
      _this.clipboard = new _clipboardMin2.default(element, {
        // Setting the container is necessary for Clipboard to function within
        // focus traps, like in a Modal.
        container: element
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // If you add propsTypes, add the corresponding propNames.


  _createClass(CopyButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.textEl && _clipboardMin2.default.isSupported()) {
        this.setClipboard(this.props.textEl);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.revertTimer) clearTimeout(this.revertTimer);
      if (this.clipboard) {
        this.clipboard.destroy();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var copyAvailable = _clipboardMin2.default.isSupported();
      if (nextProps.textEl !== this.props.textEl && copyAvailable) {
        this.setClipboard(nextProps.textEl);
      }
      if (!copyAvailable && this.clipboard) {
        this.clipboard.destroy();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      // don't render the button if you can't use it to copy,
      // or are in Node during a static build

      if (typeof document !== 'undefined' && !_clipboardMin2.default.isSupported()) {
        return null;
      }

      var tooltipText = state.showingFeedback ? 'Copied!' : 'Copy';
      var icon = state.showingFeedback ? 'check' : 'clipboard';

      var extraProps = (0, _frontendUtilOmit2.default)(this.props, CopyButton.propNames);
      var iconButtonProps = props.iconButtonProps;
      var tooltipProps = {
        content: tooltipText
      };

      if (props.iconButtonProps.tooltipProps) {
        tooltipProps = (0, _xtend2.default)(tooltipProps, props.iconButtonProps.tooltipProps);
      }
      iconButtonProps.tooltipProps = tooltipProps;

      var button = null;
      if (state.showingFeedback) {
        // When the action is complete, we switch from the tooltip-powered IconButton
        // to a regular old button a regular old Popover. We do this so we can
        // control the display of the Popover, for it to be there for the full
        // this.props.feedbackTime.
        button = _react2.default.createElement(
          'button',
          _extends({
            type: 'button',
            className: 'btn ' + props.iconButtonProps.themeButton
          }, extraProps),
          _react2.default.createElement(_reactIcon2.default, { name: icon }),
          _react2.default.createElement(
            _reactPopover2.default
            // We don't need this one to be as accessible as a regular tooltip
            ,
            { getAnchorElement: this.getContainer,
              placement: 'top',
              alignment: 'center',
              hideWhenAnchorIsOffscreen: true,
              accessibleTitle: null
            },
            _react2.default.createElement(
              'span',
              { className: 'block txt-s' },
              tooltipText
            )
          )
        );
      } else {
        button = _react2.default.createElement(_reactIconButton2.default, _extends({
          onClick: this.handleCopyButtonClick,
          icon: icon
        }, iconButtonProps, extraProps));
      }

      // data-clipboard-text and the container ref are used by clipboard.js
      // to copy text if you do not pass in a textEl as a prop.
      // Note that this wont have as nice a failure mode.
      return _react2.default.createElement(
        'div',
        {
          ref: this.setContainer,
          className: 'inline-block',
          'data-clipboard-text': this.props.text
        },
        button
      );
    }
  }]);

  return CopyButton;
}(_react2.default.PureComponent);

CopyButton.propTypes = {
  /** The text that will be copied when the button is clicked. */
  text: _propTypes2.default.string.isRequired,
  /**
   * Pass in an element containing text to copy instead of the raw text to provide a better fallback,
   * where the text is selected for you if execcopy is not supported
   */
  textEl: _propTypes2.default.object,
  /** The interval for which `Copied!` is displayed to the user. */
  feedbackTime: _propTypes2.default.number,
  /**
   * Invoked when the button is clicked.
   * Passed one argument: the `text` prop.
   */
  onCopy: _propTypes2.default.func,
  /** Extra props to pass to the IconButton component. */
  iconButtonProps: _propTypes2.default.object
};
CopyButton.propNames = ['text', 'feedbackTime', 'onCopy', 'iconButtonProps', 'textEl'];
CopyButton.defaultProps = {
  feedbackTime: 800,
  iconButtonProps: {
    themeButton: 'btn--xs py3 px3 round'
  }
};
exports.default = CopyButton;