'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _extend = require('extend');

var _extend2 = _interopRequireDefault(_extend);

var _reactTooltip = require('@mapbox/react-tooltip');

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

var _reactIcon = require('@mapbox/react-icon');

var _reactIcon2 = _interopRequireDefault(_reactIcon);

var _frontendUtilOmit = require('@mapbox/frontend-util-omit');

var _frontendUtilOmit2 = _interopRequireDefault(_frontendUtilOmit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IconButton = function (_React$PureComponent) {
  _inherits(IconButton, _React$PureComponent);

  function IconButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IconButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IconButton.__proto__ || Object.getPrototypeOf(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.getBody = function (triggerProps) {
      var themeButton = 'btn ' + _this.props.themeButton;
      var extraProps = (0, _frontendUtilOmit2.default)(_this.props, IconButton.propNames);
      var buttonProps = (0, _extend2.default)(extraProps, triggerProps, {
        type: 'button',
        className: themeButton,
        onClick: _this.props.onClick
      });
      var iconProps = {
        name: _this.props.icon
      };
      if (_this.props.themeIcon !== undefined) {
        iconProps.themeIcon = _this.props.themeIcon;
      }

      return _react2.default.createElement(
        'button',
        buttonProps,
        _react2.default.createElement(_reactIcon2.default, iconProps)
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // If you change propTypes, also change propNames.


  _createClass(IconButton, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactTooltip2.default,
        this.props.tooltipProps,
        this.getBody
      );
    }
  }]);

  return IconButton;
}(_react2.default.PureComponent);

IconButton.propTypes = {
  /** Callback when button is clicked. */
  onClick: _propTypes2.default.func.isRequired,
  /** Name of the icon to use. */
  icon: _propTypes2.default.string.isRequired,
  /** Extra props to pass to the Tooltip component. tooltipProps.content is required. */
  tooltipProps: _propTypes2.default.object,
  /** Assembly classes to apply to the button element */
  themeButton: _propTypes2.default.string,
  /** Assembly classes to apply to the icon element */
  themeIcon: _propTypes2.default.string
};
IconButton.propNames = ['onClick', 'icon', 'tooltipProps', 'themeButton', 'themeIcon'];
IconButton.defaultProps = {
  themeButton: 'btn--xs px0'
};
exports.default = IconButton;