'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactPopoverTrigger = require('@mapbox/react-popover-trigger');

var _reactPopoverTrigger2 = _interopRequireDefault(_reactPopoverTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tooltipCounter = 0;

var Tooltip = function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false,
      tooltipId: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Save the application for the random generated id until after mount
      // so that it doesn't mess up the relation of static/dynamic React code.
      // Generating unique ids for server-rendered code without breaking
      // the checksum is very hard!
      tooltipCounter += 1;
      this.setState({ tooltipId: 'tooltip-' + tooltipCounter });
    }
  }, {
    key: 'render',
    value: function render() {
      var triggerProps = { 'aria-describedby': this.state.tooltipId };
      var tooltipContentAttributes = {
        id: this.state.tooltipId,
        // Override the "dialog" role set by popover
        role: 'tooltip'
      };

      var testId = this.props.testId;

      if (testId) {
        triggerProps['data-test'] = testId + '-trigger';
        tooltipContentAttributes['data-test'] = testId + '-tooltip';
      }

      var triggerElement = this.props.children ? this.props.children(triggerProps) : null;

      return _react2.default.createElement(
        _reactPopoverTrigger2.default,
        {
          content: this.props.content,
          renderHiddenContent: true,
          disabled: this.props.disabled,
          display: this.props.display,
          respondsToClick: this.props.respondsToClick,
          respondsToHover: true,
          respondsToFocus: true,
          receiveFocus: false,
          popoverProps: {
            hasPointer: true,
            themePopover: this.props.themeTooltip,
            placement: this.props.placement,
            alignment: this.props.alignment,
            backgroundColor: this.props.backgroundColor,
            hideWhenAnchorIsOffscreen: true,
            // Tooltips do not need aria-labels
            accessibleTitle: null,
            contentElementAttributes: tooltipContentAttributes
          }
        },
        triggerElement
      );
    }
  }]);

  return Tooltip;
}(_react2.default.Component);

Tooltip.propTypes = {
  /** The trigger element. Note that this should be a *function* that is passed a `triggerProps` argument to support accessiblity attributes from the tooltip. */
  children: _propTypes2.default.func.isRequired,
  /** The tooltip content. This can either be a string, valid JSX, or a function returning either. */
  content: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]).isRequired,
  /** Placement of the tooltip in relation to the trigger element. */
  placement: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right']),
  /** Alignment of the tooltip's edge in relation to the trigger element. */
  alignment: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right', 'center']),
  /** If `true`, the tooltip will not appear. */
  disabled: _propTypes2.default.bool,
  /** Background color of the tooltip. */
  backgroundColor: _propTypes2.default.string,
  /** If `true`, tooltip can be opened with a mouse click. */
  respondsToClick: _propTypes2.default.bool,
  /** Classes to style the tooltip container. */
  themeTooltip: _propTypes2.default.string,
  /** The CSS `display` property of the trigger element. */
  display: _propTypes2.default.string,
  /** Added as `data-test` to the tooltip element. */
  testId: _propTypes2.default.string
};
Tooltip.defaultProps = {
  placement: 'top',
  alignment: 'center',
  backgroundColor: '#fff',
  disabled: false,
  respondsToClick: false,
  themeTooltip: 'round py6 px12 shadow-darken25 txt-s z1'
};
exports.default = Tooltip;