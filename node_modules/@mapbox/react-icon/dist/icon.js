'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _frontendUtilOmit = require('@mapbox/frontend-util-omit');

var _frontendUtilOmit2 = _interopRequireDefault(_frontendUtilOmit);

var _getWindow = require('./get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Icon = function (_React$PureComponent) {
  _inherits(Icon, _React$PureComponent);

  function Icon() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Icon);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.setIconElement = function (element) {
      _this.iconElement = element;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  // If you change propTypes, make sure to change propNames.


  _createClass(Icon, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.inline && this.iconElement) {
        // Match height of icon element to line height, ensuring inlined icon
        // doesn't displace text line height, is vertically centered,
        // and wraps along with multi-line text.
        this.iconElement.style.height = (0, _getWindow2.default)().getComputedStyle(this.iconElement)['line-height'];
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;


      var iconClasses = 'events-none icon';
      if (props.themeIcon !== undefined) iconClasses += ' ' + props.themeIcon;

      if (props.inline) {
        iconClasses += ' inline-block align-t';
      }

      var extraProps = (0, _frontendUtilOmit2.default)(props, Icon.propNames.concat('style'));
      var svgStyle = props.style || {};
      if (!svgStyle.width) {
        svgStyle.width = 18;
      }
      if (!svgStyle.height) {
        svgStyle.height = 18;
      }

      var iconContent = _react2.default.createElement(
        'svg',
        _extends({
          ref: this.setIconElement,
          role: 'presentation',
          focusable: 'false',
          className: iconClasses,
          style: svgStyle
        }, extraProps),
        _react2.default.createElement('use', {
          xmlnsXlink: 'http://www.w3.org/1999/xlink',
          xlinkHref: '#icon-' + props.name
        })
      );

      return iconContent;
    }
  }]);

  return Icon;
}(_react2.default.PureComponent);

Icon.propTypes = {
  name: _propTypes2.default.string.isRequired,
  themeIcon: _propTypes2.default.string,
  inline: _propTypes2.default.bool
};
Icon.propNames = ['name', 'themeIcon', 'inline'];
Icon.defaultProps = {
  inline: false
};
exports.default = Icon;